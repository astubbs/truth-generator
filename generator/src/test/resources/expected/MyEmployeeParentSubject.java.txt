package io.stubbs.truth.generator.testModel;
import com.google.common.truth.Subject;
import javax.annotation.processing.Generated;
import com.google.common.truth.FailureMetadata;
import static io.stubbs.truth.generator.internal.autoShaded.java.time.ZonedDateTimeSubject.zonedDateTimes;
import static io.stubbs.truth.generator.internal.autoShaded.java.time.ZonedDateTimeSubject.zonedDateTimes;
import java.time.ZonedDateTime;
import static com.google.common.truth.Fact.*;
import com.google.common.truth.IntegerSubject;
import io.stubbs.truth.generator.internal.autoShaded.java.time.ZonedDateTimeSubject;
import static io.stubbs.truth.generator.testModel.MyEmployeeSubject.myEmployees;
import io.stubbs.truth.generator.testModel.MyEmployeeSubject;
import io.stubbs.truth.generator.testModel.MyEmployee;
import static io.stubbs.truth.generator.testModel.IdCardSubject.idCards;
import io.stubbs.truth.generator.testModel.IdCardSubject;
import io.stubbs.truth.generator.testModel.IdCard;
import static io.stubbs.truth.generator.testModel.StateSubject.states;
import io.stubbs.truth.generator.testModel.StateSubject;
import io.stubbs.truth.generator.testModel.MyEmployee.State;
import static io.stubbs.truth.generator.internal.autoShaded.java.util.UUIDSubject.uUIDs;
import io.stubbs.truth.generator.internal.autoShaded.java.util.UUIDSubject;
import java.util.UUID;
import com.google.common.truth.PrimitiveIntArraySubject;
import static io.stubbs.truth.generator.internal.autoShaded.java.util.stream.DoubleStreamSubject.doubleStreams;
import io.stubbs.truth.generator.internal.autoShaded.java.util.stream.DoubleStreamSubject;
import java.util.stream.DoubleStream;
import com.google.common.truth.IntStreamSubject;
import java.util.stream.IntStream;
import com.google.common.truth.LongStreamSubject;
import java.util.stream.LongStream;
import com.google.common.truth.OptionalDoubleSubject;
import java.util.OptionalDouble;
import com.google.common.truth.OptionalIntSubject;
import java.util.OptionalInt;
import com.google.common.truth.OptionalLongSubject;
import java.util.OptionalLong;
import static io.stubbs.truth.generator.subjects.MyStringSubject.strings;
import static io.stubbs.truth.generator.subjects.MyStringSubject.strings;
import com.google.common.truth.IterableSubject;
import java.util.List;
import static io.stubbs.truth.generator.subjects.MyMapSubject.maps;
import io.stubbs.truth.generator.subjects.MyMapSubject;
import java.util.Map;
import static io.stubbs.truth.generator.subjects.MyStringSubject.strings;
import com.google.common.truth.LongSubject;
import static io.stubbs.truth.generator.internal.autoShaded.java.time.InstantSubject.instants;
import io.stubbs.truth.generator.internal.autoShaded.java.time.InstantSubject;
import java.time.Instant;
import java.util.Optional;
import static io.stubbs.truth.generator.subjects.MyStringSubject.strings;
import static io.stubbs.truth.generator.subjects.MyStringSubject.strings;
import com.google.common.truth.DoubleSubject;
import io.stubbs.truth.generator.subjects.MyStringSubject;
import com.google.common.truth.ObjectArraySubject;
import static io.stubbs.truth.generator.testModel.PersonSubject.persons;
import io.stubbs.truth.generator.testModel.PersonSubject;
import io.stubbs.truth.generator.testModel.Person;
/**
 * Truth Subject for the {@link MyEmployee}.
 *
 * Note that this class is generated / managed, and will change over time. So
 * any changes you might make will be overwritten.
 *
 * @see MyEmployee
 * @see MyEmployeeSubject
 * @see MyEmployeeChildSubject
 */
@Generated(value = "io.stubbs.truth.generator.internal.TruthGenerator", date = "1970-01-01T00:00:00Z")
public class MyEmployeeParentSubject extends Subject {
	protected final MyEmployee actual;
	protected MyEmployeeParentSubject(FailureMetadata failureMetadata,
			io.stubbs.truth.generator.testModel.MyEmployee actual) {
		super(failureMetadata, actual);
		this.actual = actual;
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public ZonedDateTimeSubject hasAnniversary() {
		isNotNull();
		return check("getAnniversary()").about(zonedDateTimes()).that(actual.getAnniversary());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasAnniversaryNotEqualTo(java.time.ZonedDateTime expected) {
		if (!(actual.getAnniversary().equals(expected))) {
			failWithActual(fact("expected Anniversary NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasAnniversaryEqualTo(java.time.ZonedDateTime expected) {
		if ((actual.getAnniversary().equals(expected))) {
			failWithActual(fact("expected Anniversary to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public IntegerSubject hasBirthYear() {
		isNotNull();
		return check("getBirthYear()").that(actual.getBirthYear());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasBirthYearNotEqualTo(int expected) {
		if (!(actual.getBirthYear() == expected)) {
			failWithActual(fact("expected BirthYear NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasBirthYearEqualTo(int expected) {
		if ((actual.getBirthYear() == expected)) {
			failWithActual(fact("expected BirthYear to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public ZonedDateTimeSubject hasBirthday() {
		isNotNull();
		return check("getBirthday()").about(zonedDateTimes()).that(actual.getBirthday());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasBirthdayNotEqualTo(java.time.ZonedDateTime expected) {
		if (!(actual.getBirthday().equals(expected))) {
			failWithActual(fact("expected Birthday NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasBirthdayEqualTo(java.time.ZonedDateTime expected) {
		if ((actual.getBirthday().equals(expected))) {
			failWithActual(fact("expected Birthday to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public MyEmployeeSubject hasBoss() {
		isNotNull();
		return check("getBoss()").about(myEmployees()).that(actual.getBoss());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasBossNotEqualTo(io.stubbs.truth.generator.testModel.MyEmployee expected) {
		if (!(actual.getBoss().equals(expected))) {
			failWithActual(fact("expected Boss NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasBossEqualTo(io.stubbs.truth.generator.testModel.MyEmployee expected) {
		if ((actual.getBoss().equals(expected))) {
			failWithActual(fact("expected Boss to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public IdCardSubject hasCard() {
		isNotNull();
		return check("getCard()").about(idCards()).that(actual.getCard());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasCardNotEqualTo(io.stubbs.truth.generator.testModel.IdCard expected) {
		if (!(actual.getCard().equals(expected))) {
			failWithActual(fact("expected Card NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasCardEqualTo(io.stubbs.truth.generator.testModel.IdCard expected) {
		if ((actual.getCard().equals(expected))) {
			failWithActual(fact("expected Card to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public StateSubject hasEmploymentState() {
		isNotNull();
		return check("getEmploymentState()").about(states()).that(actual.getEmploymentState());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasEmploymentStateNotEqualTo(io.stubbs.truth.generator.testModel.MyEmployee.State expected) {
		if (!(actual.getEmploymentState().equals(expected))) {
			failWithActual(fact("expected EmploymentState NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasEmploymentStateEqualTo(io.stubbs.truth.generator.testModel.MyEmployee.State expected) {
		if ((actual.getEmploymentState().equals(expected))) {
			failWithActual(fact("expected EmploymentState to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public UUIDSubject hasId() {
		isNotNull();
		return check("getId()").about(uUIDs()).that(actual.getId());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasIdNotEqualTo(java.util.UUID expected) {
		if (!(actual.getId().equals(expected))) {
			failWithActual(fact("expected Id NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasIdEqualTo(java.util.UUID expected) {
		if ((actual.getId().equals(expected))) {
			failWithActual(fact("expected Id to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public PrimitiveIntArraySubject hasIntArray() {
		isNotNull();
		return check("getIntArray()").that(actual.getIntArray());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasIntArrayNotEqualTo(int[] expected) {
		if (!(actual.getIntArray().equals(expected))) {
			failWithActual(fact("expected IntArray NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasIntArrayEqualTo(int[] expected) {
		if ((actual.getIntArray().equals(expected))) {
			failWithActual(fact("expected IntArray to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public DoubleStreamSubject hasMyDoubleStream() {
		isNotNull();
		return check("getMyDoubleStream()").about(doubleStreams()).that(actual.getMyDoubleStream());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyDoubleStreamNotEqualTo(java.util.stream.DoubleStream expected) {
		if (!(actual.getMyDoubleStream().equals(expected))) {
			failWithActual(fact("expected MyDoubleStream NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyDoubleStreamEqualTo(java.util.stream.DoubleStream expected) {
		if ((actual.getMyDoubleStream().equals(expected))) {
			failWithActual(fact("expected MyDoubleStream to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public IntStreamSubject hasMyIntStream() {
		isNotNull();
		return check("getMyIntStream()").that(actual.getMyIntStream());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyIntStreamNotEqualTo(java.util.stream.IntStream expected) {
		if (!(actual.getMyIntStream().equals(expected))) {
			failWithActual(fact("expected MyIntStream NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyIntStreamEqualTo(java.util.stream.IntStream expected) {
		if ((actual.getMyIntStream().equals(expected))) {
			failWithActual(fact("expected MyIntStream to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public LongStreamSubject hasMyLongStream() {
		isNotNull();
		return check("getMyLongStream()").that(actual.getMyLongStream());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyLongStreamNotEqualTo(java.util.stream.LongStream expected) {
		if (!(actual.getMyLongStream().equals(expected))) {
			failWithActual(fact("expected MyLongStream NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyLongStreamEqualTo(java.util.stream.LongStream expected) {
		if ((actual.getMyLongStream().equals(expected))) {
			failWithActual(fact("expected MyLongStream to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public OptionalDoubleSubject hasMyOptionalDouble() {
		isNotNull();
		return check("getMyOptionalDouble()").that(actual.getMyOptionalDouble());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyOptionalDoubleNotEqualTo(java.util.OptionalDouble expected) {
		if (!(actual.getMyOptionalDouble().equals(expected))) {
			failWithActual(fact("expected MyOptionalDouble NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyOptionalDoubleEqualTo(java.util.OptionalDouble expected) {
		if ((actual.getMyOptionalDouble().equals(expected))) {
			failWithActual(fact("expected MyOptionalDouble to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public OptionalIntSubject hasMyOptionalInteger() {
		isNotNull();
		return check("getMyOptionalInteger()").that(actual.getMyOptionalInteger());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyOptionalIntegerNotEqualTo(java.util.OptionalInt expected) {
		if (!(actual.getMyOptionalInteger().equals(expected))) {
			failWithActual(fact("expected MyOptionalInteger NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyOptionalIntegerEqualTo(java.util.OptionalInt expected) {
		if ((actual.getMyOptionalInteger().equals(expected))) {
			failWithActual(fact("expected MyOptionalInteger to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public OptionalLongSubject hasMyOptionalLong() {
		isNotNull();
		return check("getMyOptionalLong()").that(actual.getMyOptionalLong());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyOptionalLongNotEqualTo(java.util.OptionalLong expected) {
		if (!(actual.getMyOptionalLong().equals(expected))) {
			failWithActual(fact("expected MyOptionalLong NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasMyOptionalLongEqualTo(java.util.OptionalLong expected) {
		if ((actual.getMyOptionalLong().equals(expected))) {
			failWithActual(fact("expected MyOptionalLong to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public MyStringSubject hasName() {
		isNotNull();
		return check("getName()").about(strings()).that(actual.getName());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasNameNotEqualTo(java.lang.String expected) {
		if (!(actual.getName().equals(expected))) {
			failWithActual(fact("expected Name NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasNameEqualTo(java.lang.String expected) {
		if ((actual.getName().equals(expected))) {
			failWithActual(fact("expected Name to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public IterableSubject hasProjectList() {
		isNotNull();
		return check("getProjectList()").that(actual.getProjectList());
	}
	/**
	 * Checks if a {@link Project} element is, or is not contained in the
	 * collection.
	 */
	public void hasProjectListNotWithElement(io.stubbs.truth.generator.testModel.Project expected) {
		if (!actual.getProjectList().contains(expected)) {
			failWithActual(fact("expected ProjectList NOT to have element", expected));
		}
	}
	/**
	 * Checks if a {@link Project} element is, or is not contained in the
	 * collection.
	 */
	public void hasProjectListWithElement(io.stubbs.truth.generator.testModel.Project expected) {
		if (actual.getProjectList().contains(expected)) {
			failWithActual(fact("expected ProjectList to have element", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasProjectListNotEqualTo(java.util.List expected) {
		if (!(actual.getProjectList().equals(expected))) {
			failWithActual(fact("expected ProjectList NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasProjectListEqualTo(java.util.List expected) {
		if ((actual.getProjectList().equals(expected))) {
			failWithActual(fact("expected ProjectList to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public MyMapSubject hasProjectMap() {
		isNotNull();
		return check("getProjectMap()").about(maps()).that(actual.getProjectMap());
	}
	/**
	 * Check Maps for containing a given {@link String} key.
	 */
	public void hasProjectMapNotWithKey(java.lang.String expected) {
		if (!actual.getProjectMap().containsKey(expected)) {
			failWithActual(fact("expected ProjectMap NOT to have key", expected));
		}
	}
	/**
	 * Check Maps for containing a given {@link String} key.
	 */
	public void hasProjectMapWithKey(java.lang.String expected) {
		if (actual.getProjectMap().containsKey(expected)) {
			failWithActual(fact("expected ProjectMap to have key", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasProjectMapNotEqualTo(java.util.Map expected) {
		if (!(actual.getProjectMap().equals(expected))) {
			failWithActual(fact("expected ProjectMap NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasProjectMapEqualTo(java.util.Map expected) {
		if ((actual.getProjectMap().equals(expected))) {
			failWithActual(fact("expected ProjectMap to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public MyStringSubject hasSanity() {
		isNotNull();
		return check("getSanity()").about(strings()).that(actual.getSanity());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasSanityNotEqualTo(java.lang.String expected) {
		if (!(actual.getSanity().equals(expected))) {
			failWithActual(fact("expected Sanity NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasSanityEqualTo(java.lang.String expected) {
		if ((actual.getSanity().equals(expected))) {
			failWithActual(fact("expected Sanity to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public LongSubject hasSomeLongAspect() {
		isNotNull();
		return check("getSomeLongAspect()").that(actual.getSomeLongAspect());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasSomeLongAspectNotEqualTo(long expected) {
		if (!(actual.getSomeLongAspect() == expected)) {
			failWithActual(fact("expected SomeLongAspect NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasSomeLongAspectEqualTo(long expected) {
		if ((actual.getSomeLongAspect() == expected)) {
			failWithActual(fact("expected SomeLongAspect to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public InstantSubject hasStartedAt() {
		isNotNull();
		hasStartedAtPresent();
		return check("getStartedAt().get()").about(instants()).that((Instant) actual.getStartedAt().get());
	}
	/**
	 * Checks Optional fields for presence.
	 */
	public void hasStartedAtNotPresent() {
		if (actual.getStartedAt().isPresent()) {
			failWithActual(simpleFact("expected StartedAt NOT to be present"));
		}
	}
	/**
	 * Checks Optional fields for presence.
	 */
	public void hasStartedAtPresent() {
		if (!actual.getStartedAt().isPresent()) {
			failWithActual(simpleFact("expected StartedAt to be present"));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasStartedAtNotEqualTo(Optional expected) {
		if (!(actual.getStartedAt().equals(expected))) {
			failWithActual(fact("expected StartedAt NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasStartedAtEqualTo(java.util.Optional expected) {
		if ((actual.getStartedAt().equals(expected))) {
			failWithActual(fact("expected StartedAt to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public MyStringSubject hasTypeParamTest() {
		isNotNull();
		return check("getTypeParamTest()").about(strings()).that(actual.getTypeParamTest());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasTypeParamTestNotEqualTo(java.lang.Object expected) {
		if (!(actual.getTypeParamTest().equals(expected))) {
			failWithActual(fact("expected TypeParamTest NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasTypeParamTestEqualTo(java.lang.Object expected) {
		if ((actual.getTypeParamTest().equals(expected))) {
			failWithActual(fact("expected TypeParamTest to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public MyStringSubject hasTypeParamTestOptional() {
		isNotNull();
		hasTypeParamTestOptionalPresent();
		return check("getTypeParamTestOptional().get()").about(strings())
				.that((String) actual.getTypeParamTestOptional().get());
	}
	/**
	 * Checks Optional fields for presence.
	 */
	public void hasTypeParamTestOptionalNotPresent() {
		if (actual.getTypeParamTestOptional().isPresent()) {
			failWithActual(simpleFact("expected TypeParamTestOptional NOT to be present"));
		}
	}
	/**
	 * Checks Optional fields for presence.
	 */
	public void hasTypeParamTestOptionalPresent() {
		if (!actual.getTypeParamTestOptional().isPresent()) {
			failWithActual(simpleFact("expected TypeParamTestOptional to be present"));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasTypeParamTestOptionalNotEqualTo(java.util.Optional expected) {
		if (!(actual.getTypeParamTestOptional().equals(expected))) {
			failWithActual(fact("expected TypeParamTestOptional NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasTypeParamTestOptionalEqualTo(java.util.Optional expected) {
		if ((actual.getTypeParamTestOptional().equals(expected))) {
			failWithActual(fact("expected TypeParamTestOptional to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public DoubleSubject hasWeighting() {
		isNotNull();
		hasWeightingPresent();
		return check("getWeighting().get()").that((Double) actual.getWeighting().get());
	}
	/**
	 * Checks Optional fields for presence.
	 */
	public void hasWeightingNotPresent() {
		if (actual.getWeighting().isPresent()) {
			failWithActual(simpleFact("expected Weighting NOT to be present"));
		}
	}
	/**
	 * Checks Optional fields for presence.
	 */
	public void hasWeightingPresent() {
		if (!actual.getWeighting().isPresent()) {
			failWithActual(simpleFact("expected Weighting to be present"));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasWeightingNotEqualTo(java.util.Optional expected) {
		if (!(actual.getWeighting().equals(expected))) {
			failWithActual(fact("expected Weighting NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasWeightingEqualTo(java.util.Optional expected) {
		if ((actual.getWeighting().equals(expected))) {
			failWithActual(fact("expected Weighting to be equal to", expected));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public MyStringSubject hasWorkNickName() {
		isNotNull();
		return check("getWorkNickName()").about(strings()).that(actual.getWorkNickName());
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasWorkNickNameNotEqualTo(java.lang.String expected) {
		if (!(actual.getWorkNickName().equals(expected))) {
			failWithActual(fact("expected WorkNickName NOT to be equal to", expected));
		}
	}
	/**
	 * Simple check for equality for all fields.
	 */
	public void hasWorkNickNameEqualTo(java.lang.String expected) {
		if ((actual.getWorkNickName().equals(expected))) {
			failWithActual(fact("expected WorkNickName to be equal to", expected));
		}
	}
	/**
	 * Simple is or is not expectation for boolean fields.
	 */
	public void isBoss() {
		if (!actual.isBoss()) {
			failWithActual(simpleFact("expected to be Boss"));
		}
	}
	/**
	 * Simple is or is not expectation for boolean fields.
	 */
	public void isNotBoss() {
		if (actual.isBoss()) {
			failWithActual(simpleFact("expected NOT to be Boss"));
		}
	}
	/**
	 * Simple is or is not expectation for boolean fields.
	 */
	public void isEmployed() {
		if (!actual.isEmployed()) {
			failWithActual(simpleFact("expected to be Employed"));
		}
	}
	/**
	 * Simple is or is not expectation for boolean fields.
	 */
	public void isNotEmployed() {
		if (actual.isEmployed()) {
			failWithActual(simpleFact("expected NOT to be Employed"));
		}
	}
	/**
	 * Simple is or is not expectation for boolean fields.
	 */
	public void isEmployedWrapped() {
		if (!actual.isEmployedWrapped()) {
			failWithActual(simpleFact("expected to be EmployedWrapped"));
		}
	}
	/**
	 * Simple is or is not expectation for boolean fields.
	 */
	public void isNotEmployedWrapped() {
		if (actual.isEmployedWrapped()) {
			failWithActual(simpleFact("expected NOT to be EmployedWrapped"));
		}
	}
	/**
	 * Simple is or is not expectation for boolean fields.
	 */
	public void isTestBooleanIsFalse() {
		if (!actual.isTestBooleanIsFalse()) {
			failWithActual(simpleFact("expected to be TestBooleanIsFalse"));
		}
	}
	/**
	 * Simple is or is not expectation for boolean fields.
	 */
	public void isNotTestBooleanIsFalse() {
		if (actual.isTestBooleanIsFalse()) {
			failWithActual(simpleFact("expected NOT to be TestBooleanIsFalse"));
		}
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public ObjectArraySubject hasToStateArray() {
		isNotNull();
		return check("toStateArray()").that(actual.toStateArray());
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public ObjectArraySubject hasToProjectObjectArray() {
		isNotNull();
		return check("toProjectObjectArray()").that(actual.toProjectObjectArray());
	}
	/**
	 * Returns the Subject for the given field type, so you can chain on other
	 * assertions.
	 */
	public PersonSubject hasToPlainPerson() {
		isNotNull();
		return check("toPlainPerson()").about(persons()).that(actual.toPlainPerson());
	}
}
