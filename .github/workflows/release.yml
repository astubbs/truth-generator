name: Truth Generator Release
on:
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch to checkout when cutting the release."
        required: true
        default: "master"
      releaseVersion:
        description: "Default version to use when preparing a release."
        required: true
        default: "X.Y.Z"
      developmentVersion:
        description: "Default version to use for new local working copy."
        required: true
        default: "X.Y.Z-SNAPSHOT"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
#           distribution: zulu

      - name: Configure Git User
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Make a release
        uses: qcastel/github-actions-maven-release@master
        env:
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk/
        with:
          release-branch-name: "release"
          maven-args: "-Dmaven.javadoc.skip=true -DskipTests -DskipITs"
#           git-release-bot-name: "release-bot"
#           git-release-bot-email: "release-bot@example.com"
          access-token: ${{ secrets.GITHUB_TOKEN }} # https
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # ssh

#           maven-args: "-Dmaven.javadoc.skip=true -DskipTests -DskipITs -Ddockerfile.skip -DdockerCompose.skip"

#       - name: Publish JAR
#         run: mvn -B release:prepare release:perform
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#       - name: ssh test
#         run: ssh -vT git@github.com
#         env:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#       - name: Cut Release
#         run: mvn -e release:prepare release:perform -B -DreleaseVersion=${{ github.event.inputs.releaseVersion }} -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }}
#         env:
#           CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
#           CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
#           GITHUB_ACTOR: ${{ github.actor }}
#           GITHUB_TOKEN: ${{ github.token }}
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
