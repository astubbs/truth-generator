package io.stubbs.truth.generator.testModel;
import io.stubbs.truth.generator.testModel.MyEmployeeSubject;
import com.google.common.truth.FailureMetadata;
import static io.stubbs.truth.generator.testModel.MyEmployeeSubject.*;
import com.google.common.truth.Truth;
import javax.annotation.processing.Generated;
/**
 * Entry point for assertions for @{MyEmployee}. Import the static accessor
 * methods from this class and use them. Combines the generated code from
 * {@MyEmployeeParentSubject}and the user code from {@MyEmployeeSubject}.
 *
 * @see io.stubbs.truth.generator.testModel.MyEmployee
 * @see MyEmployeeSubject
 * @see MyEmployeeParentSubject
 */
@Generated(value = "io.stubbs.truth.generator.internal.TruthGenerator", date = "1970-01-01T00:00:00Z")
public class MyEmployeeChildSubject extends MyEmployeeSubject {
	/**
	 * This constructor should not be used, instead see the parent's.
	 *
	 * @see MyEmployeeSubject
	 */
	private MyEmployeeChildSubject(FailureMetadata failureMetadata,
			io.stubbs.truth.generator.testModel.MyEmployee actual) {
		super(failureMetadata, actual);
	}
	/**
	 * Entry point for {@link MyEmployee} assertions.
	 */
	public static MyEmployeeSubject assertThat(io.stubbs.truth.generator.testModel.MyEmployee actual) {
		return Truth.assertAbout(myEmployees()).that(actual);
	}
	/**
	 * Convenience entry point for {@link MyEmployee} assertions when being mixed
	 * with other "assertThat" assertion libraries.
	 *
	 * @see #assertThat
	 */
	public static MyEmployeeSubject assertTruth(io.stubbs.truth.generator.testModel.MyEmployee actual) {
		return assertThat(actual);
	}
	/**
	 * see {@link Truth#assertWithMessage}
	 */
	static public ManagedSubjectBuilder assertWithMessage(java.lang.String messageToPrepend) {
		return Truth.assert_().withMessage(messageToPrepend);
	}
	/**
	 * see {@link Truth#assertWithMessage}
	 */
	static public ManagedSubjectBuilder assertWithMessage(java.lang.String format, java.lang.Object[] args) {
		return Truth.assert_().withMessage(format, args);
	}
}
